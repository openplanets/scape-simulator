grammar eu.scape_project.pw.Simulator with org.eclipse.xtext.xbase.Xbase

generate simulator "http://www.scape_project.eu/pw/Simulator"

Simulation : 
	'Simulation' name=ValidID '{'
		'runs' '=' runs=INT
		'entities:' (entities+=Entity)*
		'events:' (events+=Event)*
		'scheduling:' (scheduling+=Scheduling)*
	'}'
;

Event :
	'event' name=ValidID '{'
		expression=Expression
	'}'
;

Expression: RExpression | OExpression; 

RExpression : 
	'repeat' number=INT '{'
		(expression+=Expression)+
	'}' 
;

OExpression : PExpression | EExpression | MExpression;

PExpression : leftSide=Identifier '+=' rightSide=RightSide;
EExpression : leftSide=Identifier '=' rightSide=RightSide;
MExpression : leftSide=Identifier '-=' rightSide=RightSide;

Identifier : ID ('.' ID) * '.' ATTRIBUTES;

ATTRIBUTES: 'size';

RightSide : Random;

Descrete : INT;

Random : Uniform | Normal;

Uniform: 'Uniform''('a=INT','b=INT')';

Normal: 'Normal''('mean=INT','std=INT')';

Entity : Collection ; 

Collection : 
	'collection' name=ID '{' 
		
		('size' '=' size=INT)?
		(subCollections+=Collection)*	
		
	'}' 
;


Scheduling: EventScheduling | ObserverScheduling | ConditionalScheduling;

EventScheduling :
	'schedule ' schedule=[Event] 
	'{'
		('start''=' start=INT ';')?
		('end' '=' end=INT ';')?
		('every' '=' every=INT ';')?
			
	'}'
;

ObserverScheduling: 
	observes=[Event] '=>' schedule=[Event] '{'
			('delay' '=' delay=INT ';')?
		'}'
;

ConditionalScheduling : 
	'condition' name=ValidID 'when' (condition=Condition) '=>' schedule=[Event]
	'endcondition'
;

Condition: 
	leftSide=Identifier operator=Opt rightSide=INT 
;

Opt : Greater | Smaller | Equal ;

Greater : '>';
Smaller : '<';
Equal : '==';
