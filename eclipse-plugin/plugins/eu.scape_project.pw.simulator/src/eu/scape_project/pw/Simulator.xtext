grammar eu.scape_project.pw.Simulator with org.eclipse.xtext.xbase.Xbase

generate simulator "http://www.scape_project.eu/pw/Simulator"

Simulation:
	'SIMULATION' name=ValidID
	'start' '=' startMonth=INT '/' startYear=INT
	'stop' '=' stopMonth=INT '/' stopYear=INT
	'runs' '=' runs=INT
	'entities:' (entities+=Entity)*
	'events:' (events+=Event)*
	'scheduling:' (scheduling+=Scheduling)*
	'ENDSIMULATION';

Entity:
	Collection | Storage | Format | Processing;

Collection:
	'COLLECTION' name=ID
	(entries+=CollectionEntry)*
	('stored:' (storage+=[Storage] (',' storage+=[Storage])*))*
	'ENDCOLLECTION';

QName:
	ID ('.' ID)*;

CollectionEntry:
	'(' 'format' '=' format=[Entry|QName] ',' 'size' '=' size=Number 'GB' ',' 'number_of_objects' '=' num_objects=Number ')';

Storage:
	HardDisk;

HardDisk:
	'DISKS' name=ID 'capacity' '=' capacity=Number 'GB' 'ENDDISKS';

Processing:
	'PROCESSING' name=ID 'number_of_nodes' '=' number_of_nodes=INT
	'ENDPROCESSING';

Format:
	'family' name=ID
	(entries+=Entry)+;

Entry:
	'(' name=ID ',' year=INT ',' p=Number ',' q=Number ',' m=Number ')';

Event:
	'EVENT' name=ValidID
	(command+=Command)*
	'ENDEVENT';

Command:
	Ingest | Migrate | DeleteCollection | AddCollection;

Ingest:
	IngestFamily | IngestFormat;

IngestFamily:
	'ingest' 'family' format=[Format] '(' num_of_objects=Num ',' size=Num 'MB' ')' 'to' collection=[Collection];

IngestFormat:
	'ingest' 'format' format=[Entry|QName] '(' num_of_objects=Num ',' size=Num 'MB' ')' 'to' collection=[Collection];

Migrate:
	'migrate' 'from' collectionFrom=[Collection] 'family' familyFrom=[Format] ('format' formatFrom=[Entry|QName])* 'to'
	collectionTo=[Collection]
	'family' familyTo=[Format] 'format' formatTo=[Entry|QName] 'with' 'size_relationship' '=' size_relationship=Number
	'time_per_object' '=' time=Number 'ms' 'on' 'processing' process=[Processing];

DeleteCollection:
	'delete' collection=[Collection] 'from' storage=[Storage];

AddCollection:
	'store' collection=[Collection] 'to' storage=[Storage];

Identifier:
	ID ('.' ID)* ('.' ATTRIBUTES)*;

ATTRIBUTES:
	'size';

Num:
	Random | Descrete;

Descrete:
	number=Number;

Random:
	Uniform | Normal;

Uniform:
	'Uniform' '(' a=INT ',' b=INT ')';

Normal:
	'Normal' '(' mean=INT ',' std=INT ')';

Scheduling:
	EventScheduling | ObserverScheduling | ConditionalScheduling;

EventScheduling:
	'SCHEDULE' schedule=[Event]
	('start' '=' startMonth=INT '/' startYear=INT )?
	('end' '=' endMonth=INT '/' endYear=INT )?
	('every' '=' every=INT )?
	'ENDSCHEDULE';

ObserverScheduling:
	observes=[Event] '=>' schedule=[Event]
	('delay' '=' delay=INT ';')?;

ConditionalScheduling:
	'CONDITION' name=ValidID 'when' (condition=Condition) '=>' schedule=[Event]
	'ENDCONDITION';

Condition:
	leftSide=Identifier operator=Opt rightSide=Number;

Opt:
	Greater | Smaller | Equal;

Greater:
	'>';

Smaller:
	'<';

Equal:
	'==';
