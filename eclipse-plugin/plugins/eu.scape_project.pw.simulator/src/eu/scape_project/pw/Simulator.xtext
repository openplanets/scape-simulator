grammar eu.scape_project.pw.Simulator with org.eclipse.xtext.xbase.Xbase

generate simulator "http://www.scape_project.eu/pw/Simulator"

Simulation : 
	'SIMULATION' name=ValidID 
		'start' '=' startMonth = INT '/' startYear = INT 
		'stop' '=' stopMonth = INT '/' stopYear = INT 
		'runs' '=' runs=INT
		'entities:' (entities+=Entity)*
		'events:' (events+=Event)*
		'scheduling:' (scheduling+=Scheduling)*
	'ENDSIMULATION'
;

Event :
	'EVENT' name=ValidID 
		expression=Expression
	'ENDEVENT'
;

Expression: RExpression | OExpression | DeleteCollection | AddCollection; 

RExpression : 
	'REPEAT' number=INT 
		(expression+=Expression)+
	'ENDREPEAT' 
;

DeleteCollection : 
 'delete' collection=Identifier 'from' storage=[Storage]
 ;
 
 AddCollection : 
  'store' collection=Identifier 'to' storage=[Storage]	
 ;
 
OExpression : PExpression | EExpression | MExpression;

PExpression : leftSide=Identifier '+=' rightSide=RightSide;
EExpression : leftSide=Identifier '=' rightSide=RightSide;
MExpression : leftSide=Identifier '-=' rightSide=RightSide;

Identifier : ID ('.' ID) * ('.' ATTRIBUTES)*;

ATTRIBUTES: 'size';

RightSide : Random | Descrete;

Descrete : number=INT;

Random : Uniform | Normal;

Uniform: 'Uniform''('a=INT','b=INT')';

Normal: 'Normal''('mean=INT','std=INT')';

Entity : Collection | Storage  | Format ; 

Collection : 
	'COLLECTION' name=ID  
		
		('size' '=' size=INT)?
		(subCollections+=Collection)*
		('stored:' (storage+=[Storage] (',' storage+=[Storage])*))*			
	'ENDCOLLECTION'
;

Storage : HardDisk ;

HardDisk : 'DISKS' name=ID  capacity=INT 'ENDDISKS';

Format : 
	'family' name=ID 
	(entries+=Entry)+   
;

Entry : 
	'(' name=ID ',' year=INT ',' p=Number ',' q=Number ',' m=Number ')'
;

Scheduling: EventScheduling | ObserverScheduling | ConditionalScheduling;

EventScheduling :
	'SCHEDULE' schedule=[Event] 
		('start''=' start=INT ';')?
		('end' '=' end=INT ';')?
		('every' '=' every=INT ';')?
	'ENDSCHEDULE'
;

ObserverScheduling: 
	observes=[Event] '=>' schedule=[Event] '{'
			('delay' '=' delay=INT ';')?
		'}'
;

ConditionalScheduling : 
	'CONDITION' name=ValidID 'when' (condition=Condition) '=>' schedule=[Event]
	'ENDCONDITION'
;

Condition: 
	leftSide=Identifier operator=Opt rightSide=INT 
;

Opt : Greater | Smaller | Equal ;

Greater : '>';
Smaller : '<';
Equal : '==';
