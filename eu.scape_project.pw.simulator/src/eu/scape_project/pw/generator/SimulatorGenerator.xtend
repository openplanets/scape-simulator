/*
 * generated by Xtext
 */
package eu.scape_project.pw.generator

import eu.scape_project.pw.simulator.ConditionalScheduling
import eu.scape_project.pw.simulator.Event
import eu.scape_project.pw.simulator.EventScheduling
import eu.scape_project.pw.simulator.Simulation
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator

class SimulatorGenerator implements IGenerator {

	InitializatorGenerator iGenerator;
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		iGenerator = new InitializatorGenerator()
		for (e : resource.allContents.toIterable.filter(typeof(Simulation))) {
			fsa.generateFile("/simulator/" + e.name + ".java", e.createMain)
		}
		iGenerator.generateInitializator(resource,fsa);
		
		for (e : resource.allContents.toIterable.filter(typeof(Event))) {
			fsa.generateFile("/simulator/" + e.name + ".java", e.compileEvent)
		}
		
		for (e : resource.allContents.toIterable.filter(typeof(ConditionalScheduling))) {
			fsa.generateFile("/simulator/" + e.observes.name + "2" + e.schedule.name + ".java", e.compileConditionalScheduling)
		}
		

	}

	/**
	 * generate main file 
	 */
	def createMain(Simulation s) '''
		
		package simulator;
		import eu.scape_project.*;
		public class «s.name» { 
			public static void main(String[] args) {
				EventProcessor processor = new EventProcessor();
				Initializator initializator = new Initializator();
				processor.setEventContainer(initializator.getEventContainer());
				processor.setEOContainer(initializator.getEOContainer());
				processor.setSimulationState(initializator.getSimulationState());
				processor.startSimulation();
			}
		}
		
	'''
	
	
	/**
	 * generate initializer
	 */
	 def generateInitializer() '''
	 '''
	

	def compileConditionalEventSchedulingMain(ConditionalScheduling e) '''
		tmpEvent = new «e.observes.name»2«e.schedule.name»();
		processor.addEventObserver(tmpEvent);
	'''
	
	def compileEvent(Event e) '''
		
		package simulator;
		import eu.scape_project.*;
		public class «e.name» extends Event{ 
			 	

			public «e.name»() {
				name = "«e.name»";
			}
	
			@Override
			public void execute(SimulationState state) {
				System.out.println("Hello from event «e.name» at time " + state.getTime() ); 
			}
		}
		
	'''	
	
	def compileConditionalScheduling(ConditionalScheduling e) '''
	
	package simulator;
	import eu.scape_project.*;
	public class «e.observes.name»2«e.schedule.name» extends EventObserver {
		
		public «e.observes.name»2«e.schedule.name» () {
			observedEvent = "«e.observes.name»";
		}
		
		@Override
		public IEvent schedules(SimulationState state) { 
		
		 long currentTime = state.getTime();
		 IEvent tmp = new «e.schedule.name»();
		 tmp.setScheduleTime(currentTime + «e.delay»);
		 return tmp;	
		} 
	} 
	'''
}
